/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
/**
 * Base class for bubbling events
 */
export interface IPropagatingEvent<T extends string> extends ITypedEvent<T> {
    stopPropagation: boolean;
}
/**
 * Base class for typed events. Typed events have a type property holding the name of the event.
 * @event
 */
export interface ITypedEvent<T extends string> {
    /** The type name of the event. */
    type: T;
}
/**
 * Provides subscription services for events.
 */
export default class Publisher {
    constructor(options?: {
        knownEvents: boolean;
    });
    /**
     * Subscribes to an event.
     * @param type Type name of the event or an array of type names of events.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    on<T extends ITypedEvent<string>>(type: T["type"] | T["type"][], callback: (event: T) => void, context?: object): any;
    on(type: string | string[] | object, callback: (event: any) => void, context?: object): any;
    /**
     * Subscribes to an event. You may find using the .on() method more handy and more flexible.
     * @param type
     * @param callback
     * @param context
     */
    addEventListener(type: string, callback: (event: any) => void, context?: object): void;
    /**
     * One-time subscription to an event. As soon as the event is emitted, the subscription is cancelled.
     * @param type Type name of the event or an array of type names of events.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    once<T extends ITypedEvent<string>>(type: T["type"] | T["type"][], callback: (event: T) => void, context?: object): any;
    once(type: string | string[] | object, callback: (event: any) => void, context?: object): any;
    /**
     * Unsubscribes from an event.
     * @param type Type name of the event, or an array of type names of events.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    off<T extends ITypedEvent<string>>(type: T["type"] | T["type"][], callback?: (event: T) => void, context?: object): any;
    off(type: string | string[] | object, callback?: (event: any) => void, context?: object): any;
    /**
     * Unsubscribes from an event. You may find using the .off() method more handy and more flexible.
     * @param type Type name of the event.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    removeEventListener(type: string, callback?: (event: any) => void, context?: object): void;
    /**
     * Emits an event with the given message to all subscribers of the event type.
     * @param type Type name of the event.
     * @param message The object sent to the subscribers of the event type.
     */
    emit(type: string, message?: any): any;
    /**
     * Emits an event to all subscribers of the event's type.
     * @param event The event object sent to the subscribers of the event's type.
     */
    emit<T extends ITypedEvent<string>>(event: T): any;
    /**
     * Registers a new event type.
     * @param name Name of the event type.
     */
    addEvent(name: string): void;
    /**
     * Registers multiple new event types.
     * @param names Names of the event types.
     */
    addEvents(...names: string[]): void;
    /**
     * Tests whether an event type has been registered.
     * @param name Name of the event type.
     * @returns true if an event type with the given name has been added.
     */
    hasEvent(name: string): boolean;
    /**
     * Lists all registered event types.
     * @returns an array with the names of all added event types.
     */
    listEvents(): string[];
}
