/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
export declare type Index = number;
export declare type Identifier = string;
export declare type Constructor<T = any> = {
    new (...args: any[]): T;
};
export interface Type extends Function {
    new (...args: any[]): object;
}
export interface TypeOf<T> extends Function {
    new (...args: any[]): T;
}
export declare type PropOf<T> = T extends {} ? T[keyof T] : never;
export declare type ReturnType<T extends Function> = T extends (...args: any[]) => infer returnType ? returnType : never;
export declare type PrimitiveType = number | boolean | string;
export declare type Identifiable<T extends object = object> = T & {
    id: Identifier;
};
export declare type MaybeIdentifiable<T extends object = object> = T & {
    id?: Identifier;
};
export declare type Dictionary<T> = {
    [id: string]: T;
};
export declare type Transformable<U, A, TA, B, TB> = U extends A ? TA : U extends B ? TB : TA | TB;
export declare type Subtract<T, U> = Pick<T, Exclude<keyof T, keyof U>>;
export declare type PartialOptional<T, U> = Pick<T, Exclude<keyof T, keyof U>> & Partial<U>;
export declare type Record<K extends keyof any, T> = {
    [P in K]: T;
};
export declare type Enum<E> = Record<keyof E, number | string> & {
    [k: number]: string;
};
export declare const enumToArray: (e: any) => string[];
