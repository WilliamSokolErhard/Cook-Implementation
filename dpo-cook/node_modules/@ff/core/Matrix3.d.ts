/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import { IVector2 } from "./Vector2";
import Vector3 from "./Vector3";
export interface IMatrix3 {
    elements: Float32Array;
}
/**
 * 3 by 3 matrix.
 */
export default class Matrix3 {
    static readonly zeros: Matrix3;
    static readonly ones: Matrix3;
    static readonly identity: Matrix3;
    /**
     * Returns a new matrix with all elements set to zero.
     */
    static makeZeros(): Matrix3;
    /**
     * Returns a new matrix with all elements set to one.
     */
    static makeOnes(): Matrix3;
    /**
     * Returns a new matrix set to the identity matrix.
     */
    static makeIdentity(): Matrix3;
    static makeFromRowVectors(row0: Vector3, row1: Vector3, row2: Vector3): Matrix3;
    static makeFromColumnVectors(col0: Vector3, col1: Vector3, col2: Vector3): Matrix3;
    /**
     * Returns a text representation of the given matrix.
     * @param matrix
     */
    static toString(matrix: IMatrix3): string;
    /** The matrix' elements in column major order. */
    elements: Float32Array;
    /**
     * Constructs a new 3 by 3 identity matrix.
     * @param elements Optional initial values.
     */
    constructor(elements?: ArrayLike<number>);
    copy(matrix: IMatrix3): Matrix3;
    /**
     * Sets the elements of this to the given values.
     * @param e00
     * @param e01
     * @param e02
     * @param e10
     * @param e11
     * @param e12
     * @param e20
     * @param e21
     * @param e22
     */
    set(e00: any, e01: any, e02: any, e10: any, e11: any, e12: any, e20: any, e21: any, e22: any): Matrix3;
    setFromArray(array: number[], rowMajor?: boolean): Matrix3;
    /**
     * Sets all elements to zero.
     */
    setZeros(): Matrix3;
    /**
     * Sets all elements to one.
     */
    setOnes(): Matrix3;
    /**
     * Sets the identity matrix.
     */
    setIdentity(): Matrix3;
    /**
     * Transposes the matrix in-place.
     */
    transpose(): Matrix3;
    setTranslation(tx: number, ty: number): Matrix3;
    setTranslationFromVector(translation: IVector2): Matrix3;
    setRotation(angle: number): Matrix3;
    setScale(sx: number, sy: number): Matrix3;
    setScaleFromVector(scale: IVector2): Matrix3;
    addScalar(scalar: number): Matrix3;
    subScalar(scalar: number): Matrix3;
    mulScalar(scalar: number): Matrix3;
    divScalar(scalar: number): Matrix3;
    mulVector(vector: Vector3): Vector3;
    mulMatrix(other: Matrix3): Matrix3;
    invert(determinant?: number): Matrix3;
    determinant(): number;
    translate(tx: number, ty: number): Matrix3;
    rotate(angle: number): Matrix3;
    scale(sx: number, sy: number): Matrix3;
    toArray(array?: number[], rowMajor?: boolean): number[];
    toTypedArray(array?: Float32Array): Float32Array;
    /**
     * Returns a text representation of this matrix.
     */
    toString(): string;
}
