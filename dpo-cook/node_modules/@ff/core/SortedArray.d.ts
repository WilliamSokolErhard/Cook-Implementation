/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
export interface ISortedArrayItem<T> {
    key: number;
    value: T;
}
/**
 * Binary sorted array, providing fast insert and retrieval.
 * The sortable property must be of type number, the property name can be specified
 * in the constructor. The default name of the sortable property is "value".
 */
export default class SortedArray<T> {
    readonly items: ISortedArrayItem<T>[];
    constructor();
    get length(): number;
    get values(): T[];
    clear(): void;
    empty(): boolean;
    itemAtBefore(key: number): ISortedArrayItem<T>;
    insertItem(item: ISortedArrayItem<T>): void;
    insertAt(key: number, value: T): void;
    removeItem(item: ISortedArrayItem<T>): boolean;
    removeAt(key: number): boolean;
    /**
     * Removes items between begin (inclusive) and end (exclusive).
     * @param {number} begin
     * @param {number} end
     */
    removeBetween(begin: number, end: number): ISortedArrayItem<T>[];
    findItem(item: ISortedArrayItem<T>): ISortedArrayItem<T>;
    /**
     * Returns the item whose key is equal to the given key.
     * @param {number} key
     * @returns {T} item with given value or null if not found.
     */
    findAt(key: number): ISortedArrayItem<T>;
    /**
     * Returns the index of the element whose value matches the given value.
     * @param {number} key
     * @returns {number} Index of an element of the items array, -1 if not found.
     */
    indexAt(key: number): number;
    /**
     * Returns the index of the element whose value is less or equal the given value.
     * @param {number} key
     * @returns {number} Index of an element of the items array.
     */
    indexAtBefore(key: number): number;
}
