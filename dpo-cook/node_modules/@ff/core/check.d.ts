/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
export interface IClass {
    new (): any;
}
export declare class Checker {
    static messages: {
        not: string;
        propMissing: string;
        propError: string;
        elementError: string;
        number: string;
        boolean: string;
        string: string;
        object: string;
        func: string;
        array: string;
        int: string;
        instanceOf: string;
        oneOf: string;
        positive: {
            type: string;
            description: string;
        };
        negative: {
            type: string;
            description: string;
        };
        notZero: {
            type: string;
            description: string;
        };
        min: {
            type: string;
            description: string;
        };
        max: {
            type: string;
            description: string;
        };
        between: {
            type: string;
            description: string;
        };
        length: {
            type: string;
            error: string;
            description: string;
        };
        minLength: {
            type: string;
            error: string;
            description: string;
        };
        maxLength: {
            type: string;
            error: string;
            description: string;
        };
        lengthBetween: {
            type: string;
            error: string;
            description: string;
        };
        notEmpty: {
            type: string;
            error: string;
            description: string;
        };
        email: string;
        url: string;
        path: string;
        json: string;
        parse: string;
        uuid: string;
        match: string;
        preset: string;
    };
    private _stack;
    _name: string;
    _required: boolean;
    _maybeNull: boolean;
    _convert: boolean;
    _hasPreset: boolean;
    constructor(arg: Checker | {
        [id: string]: Checker;
    } | "is" | "to");
    private _arg;
    private _add;
    private _cantConvertTo;
    check(value: any): any;
    toString(indent?: number): string;
    preset(presetValue: any): Checker;
    from(name: string): Checker;
    get required(): Checker;
    get optional(): Checker;
    get maybeNull(): Checker;
    get is(): Checker;
    get to(): Checker;
    like(template: {
        [id: string]: Checker | object;
    } | [Checker]): Checker;
    get number(): Checker;
    get boolean(): Checker;
    get string(): Checker;
    get object(): Checker;
    get func(): Checker;
    get array(): Checker;
    get email(): Checker;
    get url(): Checker;
    get json(): Checker;
    get parse(): Checker;
    get uuid(): Checker;
    instanceOf(type: IClass): Checker;
    get positive(): Checker;
    get negative(): Checker;
    get notZero(): Checker;
    min(min: number): Checker;
    max(max: number): Checker;
    between(min: number, max: number): Checker;
    length(length: number): Checker;
    minLength(minLength: number): Checker;
    maxLength(maxLength: number): Checker;
    lengthBetween(minLength: number, maxLength: number): Checker;
    get notEmpty(): Checker;
    oneOf(...args: any[]): Checker;
    match(pattern: RegExp): Checker;
    map(map: (value: any) => any): Checker;
}
declare const is: Checker;
declare const to: Checker;
export { is, to };
