/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import { IVector3 } from "./Vector3";
import { IQuaternion } from "./Quaternion";
export declare enum ERotationOrder {
    XYZ = 0,
    YXZ = 1,
    ZXY = 2,
    ZYX = 3,
    YZX = 4,
    XZY = 5
}
export interface IMatrix4 {
    elements: Float32Array;
}
/**
 * 4 by 4 matrix.
 */
export default class Matrix4 {
    static readonly zeros: Matrix4;
    static readonly ones: Matrix4;
    static readonly identity: Matrix4;
    /**
     * Returns a new matrix with all elements set to zero.
     */
    static makeZeros(): Matrix4;
    /**
     * Returns a new matrix with all elements set to one.
     */
    static makeOnes(): Matrix4;
    /**
     * Returns a new matrix set to the identity matrix.
     */
    static makeIdentity(): Matrix4;
    /**
     * Returns a text representation of the given matrix.
     * @param matrix
     */
    static toString(matrix: IMatrix4): string;
    /** The matrix' elements in column major order. */
    elements: Float32Array;
    /**
     * Constructs a new 4 by 4 identity matrix.
     * @param elements Optional initial values.
     */
    constructor(elements?: ArrayLike<number>);
    /**
     * Copies the elements of the given matrix to this.
     * @param matrix
     */
    copy(matrix: IMatrix4): Matrix4;
    /**
     * Sets the elements of this to the given values.
     * @param e00
     * @param e01
     * @param e02
     * @param e03
     * @param e10
     * @param e11
     * @param e12
     * @param e13
     * @param e20
     * @param e21
     * @param e22
     * @param e23
     * @param e30
     * @param e31
     * @param e32
     * @param e33
     */
    set(e00: any, e01: any, e02: any, e03: any, e10: any, e11: any, e12: any, e13: any, e20: any, e21: any, e22: any, e23: any, e30: any, e31: any, e32: any, e33: any): Matrix4;
    /**
     * Sets the elements to the values of the given array.
     * @param array
     * @param rowMajor If true, reads the array in row major order. Default is false.
     */
    setFromArray(array: number[], rowMajor?: boolean): Matrix4;
    /**
     * Sets all elements to zero.
     */
    setZeros(): Matrix4;
    /**
     * Sets all elements to one.
     */
    setOnes(): Matrix4;
    /**
     * Sets the identity matrix.
     */
    setIdentity(): Matrix4;
    /**
     * Transposes the matrix in-place.
     */
    transpose(): this;
    /**
     * Writes the basis vectors of the matrix to the given column vectors.
     * @param x Basis vector for the x axis.
     * @param y Basis vector for the y axis.
     * @param z Basis vector for the z axis.
     */
    getBasis(x: IVector3, y: IVector3, z: IVector3): this;
    /**
     * Sets the basis vectors of the matrix from the given column vectors.
     * @param x Basis vector for the x axis.
     * @param y Basis vector for the y axis.
     * @param z Basis vector for the z axis.
     */
    setBasis(x: IVector3, y: IVector3, z: IVector3): this;
    /**
     * Sets the rotation part (upper 3 by 3 matrix) of this matrix
     * from the given matrix.
     * @param matrix Matrix to extract the rotation from.
     */
    setRotationFromMatrix(matrix: IMatrix4): this;
    setRotationX(angleX: number): this;
    setRotationY(angleY: number): this;
    setRotationZ(angleZ: number): this;
    setRotation(ax: number, ay: number, az: number, order: ERotationOrder): this;
    setRotationFromVector(angles: IVector3, order: ERotationOrder): this;
    /**
     * Sets the rotation part (upper 3 by 3 matrix) of this matrix
     * from the given quaternion.
     * @param quat
     */
    setRotationFromQuaternion(quat: IQuaternion): this;
    setTranslation(tx: number, ty: number, tz: number): this;
    setTranslationFromVector(translation: IVector3): this;
    setScale(sx: number, sy: number, sz: number): this;
    setScaleFromVector(scale: IVector3): this;
    /**
     * Returns a clone of this matrix.
     */
    clone(): Matrix4;
    /**
     * Returns an array with the elements of this matrix.
     * @param array Optional destination array.
     * @param rowMajor If true, writes the array in row major order. Default is false.
     */
    toArray(array?: number[], rowMajor?: boolean): number[];
    /**
     * Returns a typed array with the elements of this matrix.
     * @param array Optional destination array.
     */
    toTypedArray(array?: Float32Array): Float32Array;
    /**
     * Returns a text representation of this matrix.
     */
    toString(): string;
}
