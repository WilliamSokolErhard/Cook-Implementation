/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import { Dictionary, TypeOf } from "./types";
import Publisher, { ITypedEvent } from "./Publisher";
export declare type ObjectOrTypeOrName<T extends object = object> = TypeOf<T> | T | string;
export interface IObjectEvent<T extends object = object> extends ITypedEvent<string> {
    add: boolean;
    remove: boolean;
    object: T;
}
export interface ITagEvent<T extends object = object> extends ITypedEvent<string> {
    add: boolean;
    remove: boolean;
    object: T;
    tag: string;
}
/**
 * Registry of object instances, grouped by their classes and base classes.
 */
export default class ObjectRegistry<T extends object> extends Publisher {
    static getTypeName(scope: ObjectOrTypeOrName): string;
    protected _rootTypeName: string;
    protected _objLists: Dictionary<T[]>;
    protected _objTags: Dictionary<T[]>;
    protected _objDict: Dictionary<T>;
    constructor(rootType: TypeOf<T>);
    /**
     * Adds an object to the registry. The object is registered under its actual class
     * and all base classes in its prototype chain. An [[IObjectEvent]] is emitted
     * for each class in the object's prototype chain.
     * @param object
     */
    add(object: T): void;
    /**
     * Removes an object from the registry.
     * @param object
     */
    remove(object: T): void;
    /**
     * Registers an object with a given tag.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     * @param object
     */
    addByTag(tag: string, object: T): void;
    /**
     * Unregisters an object with a given tag.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     * @param object
     */
    removeByTag(tag: string, object: T): boolean;
    /**
     * Removes all objects from the registry.
     */
    clear(): void;
    /**
     * Returns the total number of objects in the registry.
     */
    get length(): number;
    /**
     * Returns the number of objects (of a certain class or class name if given) in the registry.
     * @param scope Optional class or class name whose instances should be counted.
     */
    count(scope?: ObjectOrTypeOrName): number;
    /**
     * Returns true if the registry contains objects (of a given class or class name) or the given instance.
     * @param scope A class, class name, or an instance of a class.
     */
    has<U extends T>(scope: ObjectOrTypeOrName<U>): boolean;
    /**
     * Returns true if the registry contains the given object.
     * @param object
     */
    contains<U extends T>(object: U): boolean;
    /**
     * Returns the first found instance of the given class or class name.
     * @param scope Class or class name of the instance to return.
     * @param nothrow If true, the method returns undefined if no instance was found.
     * By default, an error is thrown uf no instance is registered with the given class/class name.
     */
    get<U extends T = T>(scope?: ObjectOrTypeOrName<U>, nothrow?: boolean): U | undefined;
    /**
     * Returns an array with all instances of the given class or class name.
     * This is a live array, it should not be kept or modified. If you need
     * a storable/editable array, use [[ObjectRegistry.cloneArray]] instead.
     * @param scope Class or class name of the instances to return.
     */
    getArray<U extends T = T>(scope?: ObjectOrTypeOrName<U>): Readonly<U[]>;
    /**
     * Returns a cloned array with all instances of the given class or class name.
     * @param scope Class or class name of the instances to return.
     */
    cloneArray<U extends T = T>(scope?: ObjectOrTypeOrName<U>): U[];
    /**
     * Returns an object by its id.
     * @param id An object's id.
     */
    getById(id: string): T | undefined;
    /**
     * Returns a dictionary with all objects in the registry accessible by their ids.
     * The dictionary only contains objects with an 'id' property.
     */
    getDictionary(): Readonly<Dictionary<T>>;
    getByTag(tag: string): Readonly<T[]>;
    /**
     * Adds a listener for an object add/remove event.
     * @param scope Type, type instance, or type name to subscribe to.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    on<U extends T>(scope: ObjectOrTypeOrName<U>, callback: (event: IObjectEvent<U>) => void, context?: object): void;
    /**
     * Adds a one-time listener for an object add/remove event.
     * @param scope Type, type instance, or type name to subscribe to.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    once<U extends T>(scope: ObjectOrTypeOrName<U>, callback: (event: IObjectEvent<U>) => void, context?: object): void;
    /**
     * Removes a listener for an object add/remove event.
     * @param scope Type, type instance, or type name to subscribe to.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    off<U extends T>(scope: ObjectOrTypeOrName<U>, callback: (event: IObjectEvent<U>) => void, context?: object): void;
    /**
     * Returns the type name for the given instance, type or name.
     * @param scope
     */
    getTypeName(scope?: ObjectOrTypeOrName): string;
}
