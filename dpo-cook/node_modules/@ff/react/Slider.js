"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const math_1 = require("@ff/core/math");
const ManipSource_1 = require("./ManipSource");
////////////////////////////////////////////////////////////////////////////////
class Slider extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            value: props.value
        };
        this.knobStyle = { left: "0" };
        this.onRefSlider = this.onRefSlider.bind(this);
        this.onRefKnob = this.onRefKnob.bind(this);
    }
    componentWillReceiveProps(props) {
        this.setState({
            value: props.value
        });
    }
    setValue(value) {
        const props = this.props;
        value = math_1.default.limit(value, props.min, props.max);
        this.setState({ value });
        if (props.onChange) {
            props.onChange(value);
        }
    }
    render() {
        this.updateKnobPosition();
        return (React.createElement("div", { ref: this.onRefSlider, className: this.props.className },
            React.createElement("div", { ref: this.onRefKnob, className: "ff-knob", style: this.knobStyle })));
    }
    onManipBegin(event) {
        return true;
    }
    onManipUpdate(event) {
        if (!event.isActive) {
            return;
        }
        const props = this.props;
        const delta = event.movementX;
        const width = this.sliderElement.getBoundingClientRect().width;
        const left = parseInt(this.knobElement.style.left) + delta;
        const value = left / width * (props.max - props.min) + props.min;
        this.setValue(value);
    }
    onManipEnd(event) {
    }
    onManipEvent(event) {
    }
    onRefSlider(element) {
        this.sliderElement = element;
        this.updateKnobPosition();
    }
    onRefKnob(element) {
        this.knobElement = element;
        if (element) {
            this.manip = new ManipSource_1.default(element, { touchable: true, draggable: true });
            this.manip.setListener(this);
        }
        else if (this.manip) {
            this.manip.detach();
            this.manip = null;
        }
    }
    updateKnobPosition() {
        if (!this.sliderElement) {
            return;
        }
        const props = this.props;
        const width = this.sliderElement.getBoundingClientRect().width;
        const left = (this.state.value - props.min) / (props.max - props.min) * width;
        this.knobStyle = { left: "" + left + "px" };
    }
}
exports.default = Slider;
Slider.defaultProps = {
    className: "ff-slider",
    value: 0,
    min: 0,
    max: 100
};
//# sourceMappingURL=Slider.js.map