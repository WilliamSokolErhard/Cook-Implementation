"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
class DropTarget extends React.Component {
    constructor(props) {
        super(props);
        this.onRef = this.onRef.bind(this);
        this.onDragProbe = this.onDragProbe.bind(this);
        this.onDragEnter = this.onDragEnter.bind(this);
        this.onDragUpdate = this.onDragUpdate.bind(this);
        this.onDragLeave = this.onDragLeave.bind(this);
        this.onDrop = this.onDrop.bind(this);
    }
    render() {
        const { className, style, title, children } = this.props;
        return (React.createElement("div", { className: className, style: style, title: title, ref: this.onRef }, children));
    }
    onRef(element) {
        if (element) {
            this.addListeners(element);
        }
        else if (this.element) {
            this.removeListeners(this.element);
        }
        this.element = element;
    }
    onDragProbe(event) {
        const dragEvent = event.detail;
        // if dragged mime type is acceptable, promote self as drop target
        if (this.props.payloadTypes.indexOf(dragEvent.payloadType) > -1) {
            dragEvent.dropTarget = this.element;
            event.preventDefault();
        }
    }
    onDragEnter(event) {
        const dragEvent = event.detail;
        if (this.props.onDragEnter) {
            this.props.onDragEnter(dragEvent);
        }
        //this.element.style.outline = "1px solid red";
    }
    onDragUpdate(event) {
        const dragEvent = event.detail;
        if (this.props.onDragUpdate) {
            this.props.onDragUpdate(dragEvent);
        }
    }
    onDragLeave(event) {
        const dragEvent = event.detail;
        if (this.props.onDragLeave) {
            this.props.onDragLeave(dragEvent);
        }
        //this.element.style.outline = "none";
    }
    onDrop(event) {
        const dragEvent = event.detail;
        if (this.props.onDrop) {
            this.props.onDrop(dragEvent);
        }
        //this.element.style.outline = "1px solid white";
    }
    addListeners(target) {
        target.addEventListener("ff-dragprobe", this.onDragProbe);
        target.addEventListener("ff-dragenter", this.onDragEnter);
        target.addEventListener("ff-dragupdate", this.onDragUpdate);
        target.addEventListener("ff-dragleave", this.onDragLeave);
        target.addEventListener("ff-drop", this.onDrop);
    }
    removeListeners(target) {
        target.removeEventListener("ff-dragprobe", this.onDragProbe);
        target.removeEventListener("ff-dragenter", this.onDragEnter);
        target.removeEventListener("ff-dragupdate", this.onDragUpdate);
        target.removeEventListener("ff-dragleave", this.onDragLeave);
        target.removeEventListener("ff-drop", this.onDrop);
    }
}
exports.default = DropTarget;
DropTarget.defaultProps = {
    className: "ff-drop-target",
    payloadTypes: []
};
//# sourceMappingURL=DropTarget.js.map