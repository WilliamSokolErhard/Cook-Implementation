/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { CSSProperties } from "react";
import { IComponentEvent } from "./common";
/** Properties for [[SplitterSection]] component. */
export interface ISplitterSectionProps {
    /** Unique identifier. */
    id?: string;
    /** Custom class name(s). Overrides the default class name 'splitter-section'. */
    className?: string;
    /** Relative size of the section with respect to all other sections of the splitter container.
     *  The sizes of all sections in a container should add up to 1 (or "100%"). */
    size?: string | number;
    /** Unique key for the section. If not added, will be added automatically by the container. */
    key?: string;
}
/**
 * Each content section of a splitter must be wrapped in a splitter section.
 * A splitter container contains two or more splitter sections. The container
 * automatically adds splitter handles between sections, so they become
 * resizable.
 */
export declare class SplitterSection extends React.Component<ISplitterSectionProps, any> {
    static defaultProps: Partial<ISplitterSectionProps>;
    protected static sectionStyle: CSSProperties;
    render(): JSX.Element;
}
/**
 * Fired while a splitter handle is moved.
 * @event ISplitterContainerResizeEvent
 */
export interface ISplitterContainerResizeEvent extends IComponentEvent<SplitterContainer> {
    /** Zero-based index of the first splitter section (left/top of the handle). */
    index: number;
    /** Array with the IDs of the sections adjacent to the handle being moved. */
    sectionIds: [string, string];
    /** Array with the size of the two sections adjacent to the handle being moved. */
    sizes: [number, number];
    /** True while the user is dragging. When the user stops dragging, one last event
     *  is sent with this property set to false. */
    isDragging: boolean;
}
/** Properties for [[SplitterContainer]] component. */
export interface ISplitterContainerProps {
    /** Unique identifier. */
    id?: string;
    /** Custom class name(s). Overrides the default class name 'splitter-section'. */
    className?: string;
    /** Layout of the splitter container: "horizontal" lays out the sections in a row,
     *  "vertical" lays them out in a column.
     */
    direction?: "horizontal" | "vertical";
    /** minimum size of a row or column when the splitter handle is moved. */
    margin?: number;
    /** Fired while a splitter handle is moved. */
    onResize?: (event: ISplitterContainerResizeEvent) => void;
    /** If true, fires a global window resize event while a splitter handle is moved. */
    resizeEvent?: boolean;
}
export declare class SplitterContainer extends React.Component<ISplitterContainerProps, {}> {
    static defaultProps: ISplitterContainerProps;
    private static containerStyle;
    private static horizontalHandleStyle;
    private static verticalHandleStyle;
    private readonly isVertical;
    private element;
    private handleElements;
    private sectionElements;
    private sections;
    private activeHandleIndex;
    private containerSize;
    private lastResizeEvent;
    constructor(props: ISplitterContainerProps);
    render(): JSX.Element;
    componentDidMount(): void;
    componentDidUpdate(): void;
    private updateConfiguration;
    private onRef;
    private onDragBegin;
    private onDragMove;
    private onDragEnd;
}
