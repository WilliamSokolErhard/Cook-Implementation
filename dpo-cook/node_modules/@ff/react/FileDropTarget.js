"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const _div = document.createElement('div');
const _fileDropSupported = (('draggable' in _div) || ('ondragstart' in _div && 'ondrop' in _div))
    && 'FormData' in window && 'FileReader' in window;
class FileDropTarget extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            isDragging: false
        };
        this.onDrag = this.onDrag.bind(this);
        this.onDragBegin = this.onDragBegin.bind(this);
        this.onDragEnd = this.onDragEnd.bind(this);
        this.onDrop = this.onDrop.bind(this);
    }
    render() {
        const { className, style, children } = this.props;
        const classNames = className + (this.state.isDragging ? " ff-targeted" : "");
        if (!_fileDropSupported) {
            return (React.createElement("div", { className: classNames, style: style }, children));
        }
        return (React.createElement("div", { className: classNames, style: style, onDragEnter: this.onDragBegin, onDragOver: this.onDrag, onDragLeave: this.onDragEnd, onDragEnd: this.onDragEnd, onDrop: this.onDrop }, children));
    }
    onDrag(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    hasValidFile(files) {
        const fileTypes = this.props.fileTypes;
        if (!fileTypes) {
            return true;
        }
        if (files) {
            for (let i = 0; i < files.length; ++i) {
                const extension = files[i].name.split(".").pop().toLowerCase();
                if (fileTypes.indexOf(extension) >= 0) {
                    return true;
                }
            }
        }
        return false;
    }
    onDragBegin(e) {
        this.setState({
            isDragging: true
        });
        e.preventDefault();
        e.stopPropagation();
    }
    onDragEnd(e) {
        this.setState({
            isDragging: false
        });
        e.preventDefault();
        e.stopPropagation();
    }
    onDrop(e) {
        this.setState({
            isDragging: false
        });
        e.preventDefault();
        e.stopPropagation();
        const mouseEvent = e.nativeEvent;
        const droppedFiles = mouseEvent.dataTransfer.files;
        if (this.props.onFiles && this.hasValidFile(droppedFiles)) {
            this.props.onFiles(droppedFiles, this.props.id, this);
        }
    }
}
exports.default = FileDropTarget;
FileDropTarget.defaultProps = {
    className: "ff-file-drop-target"
};
FileDropTarget.isSupported = _fileDropSupported;
//# sourceMappingURL=FileDropTarget.js.map