/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import ManipTargetHelper, { IManip, IPointerEvent, ITriggerEvent } from "@ff/browser/ManipTarget";
import { IComponentProps } from "./common";
export { IPointerEvent, ITriggerEvent };
export interface IManipEventHandler {
    onPointer: (event: IPointerEvent) => boolean;
    onTrigger: (event: ITriggerEvent) => boolean;
}
/** Properties for [[ManipTarget]] component. */
export interface IManipTargetProps extends IComponentProps {
    /** Captures a pointer after pressed. Default is true. */
    capture?: boolean;
    /** Handler for manip events; an object implementing the [[IManipHandler]] interface. */
    handler?: IManipEventHandler;
    /** Callback function for pointer events. */
    onPointer?: (event: IPointerEvent) => boolean;
    /** Callback function for trigger events (wheel, context menu, etc.) */
    onTrigger?: (event: ITriggerEvent) => boolean;
}
export default class ManipTarget extends React.Component<IManipTargetProps, {}> implements IManip {
    static readonly defaultProps: IManipTargetProps;
    protected elementRef: React.RefObject<HTMLDivElement>;
    protected manipHelper: ManipTargetHelper;
    constructor(props: IManipTargetProps);
    render(): React.ReactElement<{
        className: string;
        ref: React.RefObject<HTMLDivElement>;
        "touch-action": string;
        onPointerDown: (event: PointerEvent) => void;
        onPointerMove: (event: PointerEvent) => void;
        onPointerUp: (event: PointerEvent) => void;
        onPointerCancel: (event: PointerEvent) => void;
        onDoubleClick: (event: MouseEvent) => void;
        onContextMenu: (event: MouseEvent) => void;
        onWheel: (event: WheelEvent) => void;
    }, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    onPointer(event: IPointerEvent): boolean;
    onTrigger(event: ITriggerEvent): boolean;
}
