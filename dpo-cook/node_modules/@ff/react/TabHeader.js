"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const Button_1 = require("./Button");
const DragSource_1 = require("./DragSource");
const DropTarget_1 = require("./DropTarget");
class TabHeaderContainer extends React.Component {
    render() {
        const { className, style, children } = this.props;
        const styles = Object.assign({}, TabHeaderContainer.style, style);
        return (React.createElement("div", { className: className, style: styles }, children));
    }
}
exports.TabHeaderContainer = TabHeaderContainer;
TabHeaderContainer.defaultProps = {
    className: "ff-tab-header-container"
};
TabHeaderContainer.style = {
    whiteSpace: "nowrap"
};
class TabHeaderItem extends React.Component {
    constructor(props) {
        super(props);
        this.onDragEnter = this.onDragEnter.bind(this);
        this.onDragLeave = this.onDragLeave.bind(this);
        this.onSelect = this.onSelect.bind(this);
        this.onClose = this.onClose.bind(this);
        this.onDrop = this.onDrop.bind(this);
    }
    render() {
        const { id, index, className, style, text, icon, faIcon, title, closable, movable, active } = this.props;
        const classes = active ? className + " ff-active" : className;
        const styles = Object.assign({}, TabHeaderItem.style, style);
        const contentStyle = TabHeaderItem.contentStyle;
        const buttonStyle = TabHeaderItem.buttonsStyle;
        const hasCloseButton = closable !== false;
        const hasMoveGrip = movable !== false;
        const canDrag = movable !== false;
        return (React.createElement(DropTarget_1.default, { className: classes, style: styles, title: title, payloadTypes: ["flow/tab-header"], onDragEnter: this.onDragEnter, onDragLeave: this.onDragLeave, onDrop: this.onDrop },
            React.createElement(DragSource_1.default, { id: id, index: index, draggable: canDrag, payload: { id, index }, payloadType: "flow/tab-header", onTap: this.onSelect },
                icon ? React.createElement("span", { className: "ff-content ff-icon " + icon, style: contentStyle }) : null,
                faIcon ? React.createElement("span", { className: "ff-content ff-icon fa fas fa-" + faIcon, style: contentStyle }) : null,
                text ? React.createElement("span", { className: "ff-content ff-text", style: contentStyle }, text) : null,
                hasCloseButton ?
                    React.createElement(Button_1.default, { className: "ff-content ff-button", id: id, style: buttonStyle, faIcon: "times", onTap: this.onClose }) : null,
                hasMoveGrip && !hasCloseButton ?
                    React.createElement(Button_1.default, { className: "ff-content ff-button", id: id, style: buttonStyle, disabled: true, faIcon: "th" }) : null)));
    }
    onDragEnter() {
    }
    onDragLeave() {
    }
    onSelect() {
        const { id, index, onSelect } = this.props;
        if (onSelect) {
            onSelect({ id, index, sender: this });
        }
    }
    onClose() {
        const { id, index, onClose } = this.props;
        if (onClose) {
            onClose({ id, index, sender: this });
        }
    }
    onDrop(event) {
        const { id, index, onDrop } = this.props;
        if (onDrop) {
            onDrop({
                sourceTabId: event.payload.id,
                sourceTabIndex: event.payload.index,
                id,
                index,
                sender: this
            });
        }
    }
}
exports.TabHeaderItem = TabHeaderItem;
TabHeaderItem.defaultProps = {
    className: "ff-tab-header-item",
    active: false
};
TabHeaderItem.style = {
    display: "inline-block",
    whiteSpace: "nowrap"
};
TabHeaderItem.contentStyle = {
    display: "inline-block",
    whiteSpace: "nowrap",
    cursor: "pointer"
};
TabHeaderItem.buttonsStyle = {
    display: "inline-block"
};
//# sourceMappingURL=TabHeader.js.map