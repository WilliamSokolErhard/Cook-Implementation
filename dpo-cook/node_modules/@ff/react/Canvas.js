"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
/**
 * Wraps a properly scaled HTML canvas element. Generates events
 * when canvas is mounted, unmounted, or resized.
 */
class Canvas extends React.Component {
    constructor(props) {
        super(props);
        this.onRef = this.onRef.bind(this);
        this.onResize = this.onResize.bind(this);
        this.canvas = null;
    }
    render() {
        const { className, style, } = this.props;
        return (React.createElement("div", { className: className, style: style },
            React.createElement("canvas", { style: Canvas.style, ref: this.onRef })));
    }
    onRef(canvas) {
        this.canvas = canvas;
        if (canvas) {
            window.addEventListener("resize", this.onResize);
        }
        else {
            window.removeEventListener("resize", this.onResize);
        }
        const { id, index, onCanvas } = this.props;
        if (onCanvas) {
            onCanvas({ canvas, id, index, sender: this });
        }
        this.onResize();
    }
    onResize() {
        const canvas = this.canvas;
        if (!canvas) {
            return;
        }
        const width = canvas.clientWidth;
        const height = canvas.clientHeight;
        const { id, index, onResize } = this.props;
        if (onResize) {
            onResize({ canvas, width, height, id, index, sender: this });
        }
    }
}
exports.default = Canvas;
Canvas.defaultProps = {
    className: "ff-canvas"
};
Canvas.style = {
    display: "block",
    width: "100%",
    height: "100%"
};
//# sourceMappingURL=Canvas.js.map