/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { ReactElement } from "react";
import { ITabHeaderCloseEvent, ITabHeaderDropEvent, ITabHeaderSelectEvent } from "./TabHeader";
import { IComponentEvent, IComponentProps } from "./common";
/** Properties for [[TabItem]] component. */
export interface ITabItemProps {
    /** Unique identifier. */
    id?: string;
    /** Unique numeric index. */
    index?: number;
    /** Text displayed in the tab header. */
    text?: string;
    /** Icon displayed in the tab header, in front of the text. */
    icon?: string;
    /** Font Awesome icon displayed in the tab header, in front of the text. */
    faIcon?: string;
    /** Tooltip text */
    title?: string;
    /** If true, tab header displays a close button. Default is true. */
    closable?: boolean;
    /** If true, tab header can be dragged and rearranged. Default is true. */
    movable?: boolean;
}
/**
 *
 * @param {ITabItemProps & {children?: React.ReactNode}} props
 * @returns {React.DOMElement<ITabItemProps & {children?: React.ReactNode}, Element>}
 * @constructor
 */
export declare const TabItem: React.SFC<ITabItemProps>;
export interface ITabSelectEvent extends IComponentEvent<TabContainer> {
    tabId: string;
    tabIndex: number;
}
export interface ITabCloseEvent extends ITabSelectEvent {
}
export interface ITabDropEvent extends ITabSelectEvent {
    sourceTabId: string;
    sourceTabIndex: number;
}
/** Properties for [[TabContainer]] component. */
export interface ITabContainerProps extends IComponentProps {
    activeTabId?: string;
    activeTabIndex?: number;
    onTabSelect?: (event: ITabSelectEvent) => void;
    onTabClose?: (event: ITabCloseEvent) => void;
    onTabDrop?: (event: ITabDropEvent) => void;
}
interface ITabContainerState {
    activeTabId: string;
    activeTabIndex: number;
}
export default class TabContainer<P extends ITabContainerProps = ITabContainerProps> extends React.Component<ITabContainerProps, ITabContainerState> {
    static readonly defaultProps: Partial<ITabContainerProps>;
    static getDerivedStateFromProps(props: any): {
        activeTabId: any;
        activeTabIndex: any;
    };
    constructor(props: P);
    protected renderHeaderContainer(children: ReactElement<any>[]): JSX.Element;
    protected renderContentContainer(children: ReactElement<any>[]): JSX.Element;
    protected renderHeaderItem(item: ReactElement<ITabItemProps>, isActive: boolean): JSX.Element;
    protected renderContentItem(item: ReactElement<ITabItemProps>, isActive: boolean): JSX.Element;
    render(): JSX.Element;
    protected onSelect(event: ITabHeaderSelectEvent): void;
    protected onClose(event: ITabHeaderCloseEvent): void;
    protected onDrop(event: ITabHeaderDropEvent): void;
}
export {};
