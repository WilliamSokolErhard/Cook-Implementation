/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
export declare type ManipEventType = "down" | "move" | "up" | "cancel" | "wheel";
export interface IManipEvent {
    source: "mouse" | "touch";
    target: EventTarget;
    currentTarget: EventTarget;
    manip: ManipSource;
    type: ManipEventType;
    isActive: boolean;
    screenX: number;
    screenY: number;
    clientX: number;
    clientY: number;
    offsetX: number;
    offsetY: number;
    movementX: number;
    movementY: number;
    centerX: number;
    centerY: number;
    button: number;
    buttons: number;
    wheel: number;
    changedTouches: TouchList;
    targetTouches: TouchList;
    touches: TouchList;
    pinchDistance: number;
    pinchFactor: number;
    shiftKey: boolean;
    ctrlKey: boolean;
    altKey: boolean;
    metaKey: boolean;
}
export interface IManipListener {
    onManipBegin: (event: IManipEvent) => boolean;
    onManipEnd: (event: IManipEvent) => void;
    onManipUpdate: (event: IManipEvent) => void;
    onManipEvent: (event: IManipEvent) => void;
}
export interface IManipTraits {
    /** If true, enables touch events */
    touchable?: boolean;
    /** If true, enables drag events */
    draggable?: boolean;
    /** If true, enables mouse wheel events */
    scrollable?: boolean;
    stopPropagation?: boolean;
    preventDefault?: boolean;
}
export default class ManipSource {
    protected element: HTMLElement;
    protected traits: IManipTraits;
    protected listener: IManipListener;
    protected activationEvent: IManipEvent;
    protected lastEvent: IManipEvent;
    protected pinchDistance: number;
    protected isActive: boolean;
    protected isCaptured: boolean;
    constructor(element: HTMLElement, traits?: IManipTraits);
    detach(): void;
    setListener(listener: IManipListener): void;
    protected startCapture(): void;
    protected stopCapture(): void;
    protected onManipBegin(event: IManipEvent): boolean;
    protected onManipUpdate(event: IManipEvent): void;
    protected onManipEnd(event: IManipEvent): void;
    protected onManipEvent(event: IManipEvent): void;
    protected onMouseDown(event: MouseEvent): void;
    protected onMouseMove(event: MouseEvent): void;
    protected onMouseUp(event: MouseEvent): void;
    protected onMouseWheel(event: WheelEvent): void;
    protected onTouchStart(event: TouchEvent): void;
    protected onTouchMove(event: TouchEvent): void;
    protected onTouchEnd(event: TouchEvent): void;
    protected onTouchCancel(event: TouchEvent): void;
    protected onContextMenu(event: MouseEvent): void;
    protected setPropagation(event: MouseEvent | TouchEvent): void;
    protected manipFromMouseEvent(event: MouseEvent | WheelEvent, type: ManipEventType): IManipEvent;
    protected manipFromTouchEvent(event: TouchEvent, type: ManipEventType): IManipEvent;
    private addEventListeners;
    private removeEventListeners;
}
