/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { MouseEvent as ReactMouseEvent, WheelEvent as ReactWheelEvent, PointerEvent as ReactPointerEvent, SyntheticEvent } from "react";
import { IComponentProps, IComponentEvent } from "./common";
export declare type ManipEventType = "down" | "move" | "up" | "wheel" | "dblclick" | "contextmenu";
export declare type PointerEvent = ReactPointerEvent<HTMLDivElement>;
export declare type MouseEvent = ReactMouseEvent<HTMLDivElement>;
export declare type WheelEvent = ReactWheelEvent<HTMLDivElement>;
export interface IManipEvent extends IComponentEvent<Manip> {
    pointerEvent: PointerEvent;
    originalEvent: SyntheticEvent;
    target: EventTarget;
    activePointerList: PointerEvent[];
    activePointerCount: number;
    type: ManipEventType;
    isActive: boolean;
    movementX: number;
    movementY: number;
    centerX: number;
    centerY: number;
    primaryX: number;
    primaryY: number;
    pinchDistance: number;
    pinchFactor: number;
    pinchDeltaFactor: number;
    pinchAngle: number;
    pinchDeltaAngle: number;
    wheel: number;
}
export interface IManipListener {
    onManipBegin: (event: IManipEvent) => void;
    onManipEnd: (event: IManipEvent) => void;
    onManipUpdate: (event: IManipEvent) => void;
    onManipEvent: (event: IManipEvent) => boolean;
}
export interface IManipProps extends IComponentProps {
    capture?: boolean;
    listener?: IManipListener;
    onManipBegin?: (event: IManipEvent) => void;
    onManipUpdate?: (event: IManipEvent) => void;
    onManipEnd?: (event: IManipEvent) => void;
    onManipEvent?: (event: IManipEvent) => boolean;
}
export default class Manip extends React.Component<IManipProps, {}> {
    static defaultProps: {
        className: string;
    };
    protected element: React.RefObject<HTMLDivElement>;
    protected isActive: boolean;
    protected activePointers: {
        [id: string]: PointerEvent;
    };
    protected centerX: number;
    protected centerY: number;
    protected primaryX: number;
    protected primaryY: number;
    protected pinchStartDistance: number;
    protected pinchLastDistance: number;
    protected pinchLastAngle: number;
    constructor(props: IManipProps);
    render(): any;
    protected onPointerDown(event: PointerEvent): void;
    protected onPointerMove(event: PointerEvent): void;
    protected onPointerUp(event: PointerEvent): void;
    protected onPointerCancel(event: PointerEvent): void;
    protected onPointerUpOrCancel(event: PointerEvent): void;
    protected onDoubleClick(event: MouseEvent): void;
    protected onContextMenu(event: MouseEvent): void;
    protected onMouseWheel(event: WheelEvent): void;
    protected sendManipBeginEvent(event: IManipEvent): void;
    protected sendManipUpdateEvent(event: IManipEvent): void;
    protected sendManipEndEvent(event: IManipEvent): void;
    protected createManipFromPointerEvent(event: PointerEvent, type: ManipEventType): IManipEvent;
    protected createManipFromMouseEvent(event: MouseEvent | WheelEvent, type: ManipEventType): IManipEvent;
}
