/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { CSSProperties } from "react";
import { IComponentEvent, IComponentProps } from "./common";
/**
 * Fired after canvas is mounted and before canvas is unmounted.
 * After mounting, the canvas property contains the HTML canvas element.
 * Before unmounting, the canvas property is null.
 */
export interface ICanvasEvent extends IComponentEvent<Canvas> {
    /** The HTML canvas element or null if the component is about to unmount. */
    canvas: HTMLCanvasElement | null;
}
/**
 * Fired after canvas (i.e. the browser window) is resized.
 * Contains the new width and height of the HTML canvas element.
 */
export interface ICanvasResizeEvent extends ICanvasEvent {
    /** The new width of the HTML canvas element. */
    width: number;
    /** The new height of the HTML canvas element. */
    height: number;
}
/** Properties for [[Canvas]] component. */
export interface ICanvasProps extends IComponentProps {
    /** @event onCanvas */
    onCanvas?: (event: ICanvasEvent) => void;
    /** @event onResize */
    onResize?: (event: ICanvasResizeEvent) => void;
}
/**
 * Wraps a properly scaled HTML canvas element. Generates events
 * when canvas is mounted, unmounted, or resized.
 */
export default class Canvas extends React.Component<ICanvasProps, {}> {
    static readonly defaultProps: Partial<ICanvasProps>;
    protected static readonly style: CSSProperties;
    protected canvas: HTMLCanvasElement;
    constructor(props: ICanvasProps);
    render(): JSX.Element;
    protected onRef(canvas: HTMLCanvasElement): void;
    protected onResize(): void;
}
