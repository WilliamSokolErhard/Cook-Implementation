"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const _defaultStyle = {
    boxSizing: "border-box",
    display: "grid"
};
const _interpretSize = function (value) {
    if (typeof value === "number") {
        return value <= 1.0 ? (value * 100).toString() + "%" : value.toString() + "px";
    }
    return value;
};
/**
 * Component applying a grid layout to its children by wrapping them in a div element.
 * This is a React stateless functional component.
 * @param {IGridContainerProps & {children?: React.ReactNode}} props
 * @returns {React.SFC<IGridContainerProps>}
 * @constructor
 */
const GridContainer = function (props) {
    const { className, style, position, columns, rows, autoColumns, autoRows, columnGap, rowGap, justifyItems, alignItems, justifyContent, alignContent, children } = props;
    const styles = Object.assign({}, _defaultStyle, style);
    switch (position) {
        case "fill":
            styles.position = "absolute";
            styles.top = 0;
            styles.right = 0;
            styles.bottom = 0;
            styles.left = 0;
            break;
        case "relative":
            styles.position = "relative";
            break;
        case "absolute":
            styles.position = "absolute";
            break;
    }
    if (columns) {
        styles.gridTemplateColumns = columns;
    }
    if (rows) {
        styles.gridTemplateRows = rows;
    }
    if (autoColumns) {
        styles.gridAutoColumns = _interpretSize(autoColumns);
    }
    if (autoRows) {
        styles.gridAutoRows = _interpretSize(autoRows);
    }
    if (columnGap) {
        styles.gridColumnGap = _interpretSize(columnGap);
    }
    if (rowGap) {
        styles.gridRowGap = _interpretSize(rowGap);
    }
    if (justifyItems) {
        styles.justifyItems = justifyItems;
    }
    if (alignItems) {
        styles.alignItems = alignItems;
    }
    if (justifyContent) {
        styles.justifyContent = justifyContent;
    }
    if (alignContent) {
        styles.alignContent = alignContent;
    }
    return (React.createElement("div", { className: className, style: styles }, children));
};
GridContainer.defaultProps = {
    className: "ff-grid-container"
};
exports.default = GridContainer;
//# sourceMappingURL=GridContainer.js.map