/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { IComponentEvent, IComponentProps } from "./common";
/** Sent after the canvas has been resized */
export interface ICanvasResizeEvent extends IComponentEvent<Canvas> {
    width: number;
    height: number;
    resolution: number;
}
/** Sent when the context for the canvas can be created. */
export interface ICanvasCreateContextEvent extends IComponentEvent<Canvas> {
}
/** Sent when the context for the canvas becomes invalid. */
export interface ICanvasDestroyContextEvent extends IComponentEvent<Canvas> {
}
export interface ICanvasPainter {
    resize: (width: number, height: number, resolution: number) => void;
    createContext: (canvas: Canvas) => void;
    destroyContext: (canvas: Canvas) => void;
}
export interface ICanvasProps extends IComponentProps {
    resolution?: number;
    onResize?: (event: ICanvasResizeEvent) => void;
    onCreateContext?: (event: ICanvasCreateContextEvent) => void;
    onDestroyContext?: (event: ICanvasDestroyContextEvent) => void;
    painter?: ICanvasPainter;
}
/**
 * Component wrapping a HTML Canvas Element. Provides callbacks for creating/destroying the drawing context,
 * resizing and redrawing. Wraps the canvas in a div element for easier placement.
 */
export default class Canvas extends React.Component<ICanvasProps, {}> {
    static defaultProps: Partial<ICanvasProps>;
    private static canvasStyle;
    private static fullsizeStyle;
    width: number;
    height: number;
    protected canvasRef: React.RefObject<HTMLCanvasElement>;
    protected canvasContext: any;
    constructor(props: ICanvasProps);
    get element(): HTMLCanvasElement;
    createContext2d(attribs?: any): CanvasRenderingContext2D;
    createContext3d(attribs?: WebGLContextAttributes): WebGLRenderingContext;
    componentDidUpdate(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    resize(): void;
}
