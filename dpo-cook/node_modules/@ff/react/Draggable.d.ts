/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { MouseEvent as ReactMouseEvent, PointerEvent as ReactPointerEvent } from "react";
import { IComponentProps, IComponentEvent } from "./common";
export declare type MouseEvent = ReactMouseEvent<HTMLDivElement>;
export declare type PointerEvent = ReactPointerEvent<HTMLDivElement>;
export interface IDraggablePressEvent extends IComponentEvent<Draggable> {
}
export interface IDraggableReleaseEvent extends IComponentEvent<Draggable> {
}
export interface IDraggableTapEvent extends IComponentEvent<Draggable> {
}
export interface IDraggableDoubleTapEvent extends IComponentEvent<Draggable> {
}
/** Properties for [[Draggable]] component. */
export interface IDraggableProps extends IComponentProps {
    capture?: boolean;
    draggable?: boolean;
    onPress?: (event: IDraggablePressEvent) => void;
    onRelease?: (event: IDraggableReleaseEvent) => void;
    onTap?: (event: IDraggableTapEvent) => void;
    onDoubleTap?: (event: IDraggableDoubleTapEvent) => void;
    onDragBegin?: (event: PointerEvent) => void;
    onDragMove?: (event: PointerEvent, dx: number, dy: number) => void;
    onDragEnd?: (event: PointerEvent) => void;
    onPointerDown?: (event: PointerEvent) => void;
    onPointerMove?: (event: PointerEvent, dx?: number, dy?: number) => void;
    onPointerUp?: (event: PointerEvent) => void;
    onPointerCancel?: (event: PointerEvent) => void;
    onContextMenu?: (event: MouseEvent) => void;
}
export interface IDraggableState {
    isDragging: boolean;
}
export default class Draggable<P extends IDraggableProps = IDraggableProps> extends React.Component<P, IDraggableState> {
    protected static defaultProps: {
        className: string;
    };
    protected element: React.RefObject<HTMLDivElement>;
    private isActive;
    private startX;
    private startY;
    private lastX;
    private lastY;
    constructor(props: P);
    render(): JSX.Element;
    protected onPointerDown(event: PointerEvent): void;
    protected onPointerMove(event: PointerEvent): void;
    protected onPointerUp(event: PointerEvent): void;
    /** May be overridden in descendant classes. */
    protected onDoubleClick(): void;
    /** May be overridden in descendant classes. */
    protected onContextMenu(event: MouseEvent): void;
    /** May be overridden in descendant classes. */
    protected onDragBegin(event: PointerEvent): void;
    /** May be overridden in descendant classes. */
    protected onDragMove(event: PointerEvent, dx: number, dy: number): void;
    /** May be overridden in descendant classes. */
    protected onDragEnd(event: PointerEvent): void;
}
