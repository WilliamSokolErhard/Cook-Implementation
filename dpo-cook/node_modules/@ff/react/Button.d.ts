/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { CSSProperties, PointerEvent as ReactPointerEvent, KeyboardEvent } from "react";
import { IComponentEvent, IComponentProps } from "./common";
/**
 * Emitted after the button has been pressed down.
 * @event IButtonDownEvent
 */
export interface IButtonDownEvent extends IComponentEvent<Button> {
}
/**
 * Emitted after the button has been released.
 * @event IButtonUpEvent
 */
export interface IButtonUpEvent extends IComponentEvent<Button> {
}
/**
 * Emitted after the button has been tapped.
 * @event IButtonTapEvent
 */
export interface IButtonTapEvent extends IComponentEvent<Button> {
}
/**
 * Emitted after the button's selection state has changed.
 * @event IButtonSelectEvent
 */
export interface IButtonSelectEvent extends IComponentEvent<Button> {
    selected: boolean;
}
/** Properties for [[Button]] component. */
export interface IButtonProps extends IComponentProps {
    text?: string;
    /** Class(es) for a custom icon. */
    icon?: string;
    /** Name of a Font Awesome icon. Expanded into classes "fa fa-<icon>" */
    faIcon?: string;
    /** URL of an image to display with the button. */
    image?: string;
    /** Title appears when hovering over the button. */
    title?: string;
    /** When set to true, button appears in disabled state. Default is false. */
    disabled?: boolean;
    /** When selectable, clicking the button toggles "selected" state. */
    selectable?: boolean;
    /** When selected, class "selected" is added to the button. */
    selected?: boolean;
    /** Element receives the focus after mounting if true. */
    focused?: boolean;
    /** Event fired if button is pressed down. */
    onDown?: (event: IButtonDownEvent) => void;
    /** Event fired if button is released. */
    onUp?: (event: IButtonUpEvent) => void;
    /** Event fired if button is tapped (pressed and released). */
    onTap?: (event: IButtonTapEvent) => void;
    /** Event fired after selection state has changed. The selectable property must be set for this event to be fired. */
    onSelect?: (event: IButtonSelectEvent) => void;
}
export interface IButtonState {
    selected: boolean;
}
export declare type PointerEvent = ReactPointerEvent<HTMLDivElement>;
/**
 * Universal button component based on pointer events. Works with mouse and touch input.
 * Provides an icon with support for Font Awesome icons and/or a text.
 *
 * Default classes applied to outer div: control, button, selected. Classes applied
 * to content span elements: content icon|text|image
 */
export default class Button<P extends IButtonProps = IButtonProps> extends React.Component<P, IButtonState> {
    static defaultProps: IButtonProps;
    static mainStyle: CSSProperties;
    static contentStyle: CSSProperties;
    protected elementRef: React.RefObject<HTMLDivElement>;
    private pointerId;
    constructor(props: P);
    setFocus(): void;
    isSelected(): boolean;
    componentDidMount(): void;
    render(): JSX.Element;
    componentWillReceiveProps(nextProps: IButtonProps): void;
    protected onPointerDown(event: PointerEvent): void;
    protected onPointerUp(event: PointerEvent): void;
    protected onPointerCancel(event: PointerEvent): void;
    protected onKeyDown(event: KeyboardEvent<HTMLDivElement>): void;
    protected onKeyUp(event: KeyboardEvent<HTMLDivElement>): void;
}
