"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const Splitter_1 = require("./Splitter");
const TabContainer_1 = require("./TabContainer");
const DockTabContainer_1 = require("./DockTabContainer");
class DockView extends React.Component {
    constructor(props) {
        super(props);
        this.onControllerChange = this.onControllerChange.bind(this);
        this.onTabSelect = this.onTabSelect.bind(this);
        this.onTabClose = this.onTabClose.bind(this);
        this.onTabDrop = this.onTabDrop.bind(this);
        this.onSplitterResize = this.onSplitterResize.bind(this);
        this.actions = props.controller.actions;
    }
    onControllerChange() {
        this.forceUpdate();
    }
    componentDidMount() {
        this.props.controller.on("change", this.onControllerChange);
    }
    componentWillUnmount() {
        this.props.controller.off("change", this.onControllerChange);
    }
    renderSplit(layout) {
        const children = layout.sections.map((section, index) => {
            return (React.createElement(Splitter_1.SplitterSection, { id: section.id, key: section.id, size: section.size }, section.type === "split" ? this.renderSplit(section) : this.renderStack(section)));
        });
        return (React.createElement(Splitter_1.SplitterContainer, { id: layout.id, key: layout.id, direction: layout.direction, onResize: this.onSplitterResize }, children));
    }
    renderStack(layout) {
        const children = layout.panes.map(pane => {
            return (React.createElement(TabContainer_1.TabItem, { id: pane.id, key: pane.id, text: pane.title, closable: pane.closable, movable: pane.movable }, this.props.factory.create(pane.componentId)));
        });
        const activeTabId = layout.activePaneId || (layout.panes[0] && layout.panes[0].id);
        return (React.createElement(DockTabContainer_1.default, { activeTabId: activeTabId, onTabSelect: this.onTabSelect, onTabClose: this.onTabClose, onTabDrop: this.onTabDrop }, children));
    }
    render() {
        const { className, controller } = this.props;
        const layout = controller.getLayout();
        if (layout) {
            return (React.createElement("div", { className: className }, layout.type === "split" ?
                this.renderSplit(layout) :
                this.renderStack(layout)));
        }
        else {
            console.warn("DockView.render - missing layout");
            return null;
        }
    }
    onTabSelect(event) {
        //console.log("onTabSelect", event);
        this.actions.activatePane(event.tabId);
    }
    onTabClose(event) {
        //console.log("onTabClose", event);
        this.actions.removePane(event.tabId);
    }
    onTabDrop(event) {
        //console.log("onTabDrop", event);
        const dockArea = event.dockArea || "insert";
        this.actions.movePane(event.sourceTabId, event.tabId, dockArea);
    }
    onSplitterResize(event) {
        this.actions.resize(event.id, event.index, event.sizes[0], event.sizes[1]);
    }
}
exports.default = DockView;
DockView.defaultProps = {
    className: "ff-dock-view",
};
//# sourceMappingURL=DockView.js.map