"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
class Tree extends React.Component {
    render() {
        const { tree, className, includeRoot, getChildren } = this.props;
        return (React.createElement("div", { className: className }, includeRoot
            ? this.renderNode(tree)
            : getChildren(tree).map(child => this.renderNode(child))));
    }
    renderNode(node) {
        const { selected, expanded, getId, getClass, getChildren, renderHeader } = this.props;
        const id = getId(node);
        const children = getChildren(node);
        const isExpanded = expanded ? !!expanded[id] : true;
        const isSelected = selected ? !!selected[id] : false;
        const modeClass = children.length > 0 ? (isExpanded ? "ff-inner ff-expanded" : "ff-inner ff-collapsed") : "ff-leaf";
        const c = getClass(node);
        const classes = "ff-content " + modeClass + (isSelected ? " ff-selected" : "") + (c ? " " + c : "");
        const renderedChildren = isExpanded ? React.createElement("div", { className: "ff-children" }, children.map(child => this.renderNode(child))) : null;
        return (React.createElement("div", { className: "ff-node", key: id },
            React.createElement("div", { className: classes },
                renderHeader(node),
                renderedChildren)));
    }
}
exports.default = Tree;
Tree.defaultProps = {
    className: "ff-tree",
    includeRoot: true,
    getId: node => node.id,
    getClass: node => "",
    getChildren: node => node.children,
    renderHeader: node => node.toString()
};
//# sourceMappingURL=Tree.js.map