"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const Button_1 = require("./Button");
const Checkbox_1 = require("./Checkbox");
/**
 * Wrapper for a group of [[Button]] or [[Checkbox]] components. Provides selection modes
 * "radio" for radio buttons and "exclusive" for situations when at most one child component can be selected.
 */
class SelectionGroup extends React.Component {
    constructor(props) {
        super(props);
        this.onButtonTap = this.onButtonTap.bind(this);
        this.state = {
            selectionIndex: props.selectionIndex !== undefined
                ? props.selectionIndex : (props.mode === "radio" ? 0 : -1)
        };
    }
    setSelected(selectionIndex, selectionId) {
        this.setState({
            selectionIndex
        });
        const { id, index } = this.props;
        if (this.props.onSelect) {
            this.props.onSelect({ selectionIndex, selectionId, id, index, sender: this });
        }
    }
    render() {
        const { className, style, shape, children } = this.props;
        const selectionIndex = this.state.selectionIndex;
        let i = 0;
        const transformedChildren = React.Children.map(children, (child) => {
            const type = child.type;
            if (type === Button_1.default || type === Checkbox_1.default) {
                const index = child.props.index !== undefined ? child.props.index : i;
                i = index + 1;
                return React.cloneElement(child, {
                    selected: (index === selectionIndex),
                    selectable: false,
                    shape,
                    index,
                    onTap: this.onButtonTap
                });
            }
            return child;
        });
        return (React.createElement("div", { className: className, style: style }, transformedChildren));
    }
    onButtonTap(event) {
        if (this.state.selectionIndex === event.index && this.props.mode === "exclusive") {
            this.setSelected(-1, "");
        }
        else {
            this.setSelected(event.index, event.id);
        }
    }
}
exports.default = SelectionGroup;
SelectionGroup.defaultProps = {
    className: "ff-selection-group",
    mode: "radio",
    shape: "circle"
};
//# sourceMappingURL=SelectionGroup.js.map