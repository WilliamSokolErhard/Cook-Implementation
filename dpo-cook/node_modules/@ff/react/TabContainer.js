"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const FlexContainer_1 = require("./FlexContainer");
const TabHeader_1 = require("./TabHeader");
const TabContent_1 = require("./TabContent");
/**
 *
 * @param {ITabItemProps & {children?: React.ReactNode}} props
 * @returns {React.DOMElement<ITabItemProps & {children?: React.ReactNode}, Element>}
 * @constructor
 */
exports.TabItem = function (props) {
    return React.createElement("", props, props.children);
};
class TabContainer extends React.Component {
    constructor(props) {
        super(props);
        this.onSelect = this.onSelect.bind(this);
        this.onClose = this.onClose.bind(this);
        this.onDrop = this.onDrop.bind(this);
        this.state = {
            activeTabId: props.activeTabId,
            activeTabIndex: props.activeTabIndex
        };
    }
    static getDerivedStateFromProps(props) {
        return {
            activeTabId: props.activeTabId,
            activeTabIndex: props.activeTabIndex
        };
    }
    renderHeaderContainer(children) {
        return (React.createElement(TabHeader_1.TabHeaderContainer, null, children));
    }
    renderContentContainer(children) {
        return (React.createElement(TabContent_1.TabContentContainer, null, children));
    }
    renderHeaderItem(item, isActive) {
        const { id, index, text, icon, faIcon, title, closable, movable } = item.props;
        if (id === undefined && index === undefined) {
            throw new Error("either id or index property must be provided");
        }
        return (React.createElement(TabHeader_1.TabHeaderItem, { key: id || index, id: id, index: index, text: text, icon: icon, faIcon: faIcon, title: title, closable: closable, movable: movable, active: isActive, onSelect: this.onSelect, onClose: this.onClose, onDrop: this.onDrop }));
    }
    renderContentItem(item, isActive) {
        const { id, index } = item.props;
        return (React.createElement(TabContent_1.TabContentItem, { key: id || index, id: id, index: index, active: isActive }, item.props["children"]));
    }
    render() {
        const { className, children } = this.props;
        const { activeTabId, activeTabIndex } = this.state;
        const childrenArray = Array.isArray(children) ? children : [children];
        const tabItems = childrenArray.filter((item) => item.type === exports.TabItem);
        const headerItems = tabItems.map((item) => {
            const { id, index } = item.props;
            const isActive = activeTabId ? id === activeTabId : index === activeTabIndex;
            return this.renderHeaderItem(item, isActive);
        });
        const contentItems = tabItems.map((item) => {
            const { id, index } = item.props;
            const isActive = activeTabId ? id === activeTabId : index === activeTabIndex;
            return this.renderContentItem(item, isActive);
        });
        return (React.createElement(FlexContainer_1.default, { className: className, direction: "vertical", position: "fill" },
            this.renderHeaderContainer(headerItems),
            this.renderContentContainer(contentItems)));
    }
    onSelect(event) {
        this.setState({ activeTabId: event.id, activeTabIndex: event.index });
        const { id, index, onTabSelect } = this.props;
        if (onTabSelect) {
            onTabSelect({ tabId: event.id, tabIndex: event.index, id, index, sender: this });
        }
    }
    onClose(event) {
        const { id, index, onTabClose } = this.props;
        if (onTabClose) {
            onTabClose({ tabId: event.id, tabIndex: event.index, id, index, sender: this });
        }
    }
    onDrop(event) {
        const { id, index, onTabDrop } = this.props;
        if (onTabDrop) {
            onTabDrop({
                sourceTabId: event.sourceTabId,
                sourceTabIndex: event.sourceTabIndex,
                tabId: event.id,
                tabIndex: event.index,
                id,
                index,
                sender: this
            });
        }
    }
}
exports.default = TabContainer;
TabContainer.defaultProps = {
    className: "ff-tab-container",
};
//# sourceMappingURL=TabContainer.js.map