/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import { Dictionary } from "@ff/core/types";
import * as React from "react";
import { ReactNode } from "react";
export interface ITreeNode {
    id: string;
    children: ITreeNode[];
}
/** Properties for [[Tree]] component. */
export interface ITreeProps<T> {
    tree: T;
    className?: string;
    includeRoot?: boolean;
    selected?: Dictionary<any>;
    expanded?: Dictionary<any>;
    getId?: (node: T) => string;
    getClass?: (node: T) => string;
    getChildren?: (node: T) => T[];
    renderHeader?: (node: T) => ReactNode;
}
export default class Tree<T = ITreeNode> extends React.Component<ITreeProps<T>, {}> {
    static readonly defaultProps: Partial<ITreeProps<any>>;
    render(): JSX.Element;
    protected renderNode(node: T): JSX.Element;
}
