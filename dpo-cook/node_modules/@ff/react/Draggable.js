"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
class Draggable extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            isDragging: false
        };
        this.element = React.createRef();
        this.isActive = false;
        this.startX = 0;
        this.startY = 0;
        this.lastX = 0;
        this.lastY = 0;
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerUp = this.onPointerUp.bind(this);
        this.onDoubleClick = this.onDoubleClick.bind(this);
        this.onContextMenu = this.onContextMenu.bind(this);
    }
    render() {
        const { className, style, children } = this.props;
        const props = {
            className,
            style,
            ref: this.element,
            "touch-action": "none",
            onPointerDown: this.onPointerDown,
            onPointerMove: this.onPointerMove,
            onPointerUp: this.onPointerUp,
            onDoubleClick: this.onDoubleClick,
            onContextMenu: this.onContextMenu
        };
        return (React.createElement("div", Object.assign({}, props), children));
    }
    onPointerDown(event) {
        const props = this.props;
        if (props.onPointerDown) {
            props.onPointerDown(event);
        }
        if (event.isPrimary) {
            this.element.current.setPointerCapture(event.pointerId);
            this.isActive = true;
            this.startX = event.clientX;
            this.startY = event.clientY;
            this.lastX = this.startX;
            this.lastY = this.startY;
            const { id, index, onPress } = this.props;
            if (onPress) {
                onPress({ id, index, sender: this });
            }
        }
        event.stopPropagation();
        event.preventDefault();
    }
    onPointerMove(event) {
        const props = this.props;
        const state = this.state;
        const dx = event.clientX - this.lastX;
        const dy = event.clientY - this.lastY;
        this.lastX = event.clientX;
        this.lastY = event.clientY;
        if (props.onPointerMove) {
            props.onPointerMove(event, dx, dy);
        }
        if (event.isPrimary && this.isActive) {
            if (state.isDragging) {
                this.onDragMove(event, dx, dy);
            }
            else if (props.draggable !== false) {
                let deltaX = event.clientX - this.startX, deltaY = event.clientY - this.startY, manhattanDistance = Math.abs(deltaX) + Math.abs(deltaY);
                if (manhattanDistance > 2) {
                    this.setState({ isDragging: true });
                    this.onDragBegin(event);
                }
            }
            event.stopPropagation();
            event.preventDefault();
        }
    }
    onPointerUp(event) {
        const state = this.state;
        const { id, index, onPointerUp, onRelease, onTap } = this.props;
        if (onPointerUp) {
            onPointerUp(event);
        }
        if (event.isPrimary && this.isActive) {
            this.isActive = false;
            if (onRelease) {
                onRelease({ id, index, sender: this });
            }
            if (state.isDragging) {
                this.setState({ isDragging: false });
                this.onDragEnd(event);
            }
            else {
                if (onTap) {
                    onTap({ id, index, sender: this });
                }
            }
            event.stopPropagation();
            event.preventDefault();
        }
    }
    /** May be overridden in descendant classes. */
    onDoubleClick() {
        if (!this.state.isDragging) {
            const { id, index, onDoubleTap } = this.props;
            if (onDoubleTap) {
                onDoubleTap({ id, index, sender: this });
            }
        }
    }
    /** May be overridden in descendant classes. */
    onContextMenu(event) {
        event.preventDefault();
        if (!this.state.isDragging && this.props.onContextMenu) {
            this.props.onContextMenu(event);
        }
    }
    /** May be overridden in descendant classes. */
    onDragBegin(event) {
        if (this.props.onDragBegin) {
            this.props.onDragBegin(event);
        }
    }
    /** May be overridden in descendant classes. */
    onDragMove(event, dx, dy) {
        if (this.props.onDragMove) {
            this.props.onDragMove(event, dx, dy);
        }
    }
    /** May be overridden in descendant classes. */
    onDragEnd(event) {
        if (this.props.onDragEnd) {
            this.props.onDragEnd(event);
        }
    }
}
exports.default = Draggable;
Draggable.defaultProps = {
    className: "ff-draggable"
};
//# sourceMappingURL=Draggable.js.map