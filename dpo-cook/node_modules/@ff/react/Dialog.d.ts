/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { CSSProperties, PointerEvent, KeyboardEvent } from "react";
import { IComponentEvent, IComponentProps } from "./common";
export interface IAnchorProps {
    elementRef?: React.RefObject<HTMLDivElement>;
}
export declare class Anchor extends React.Component<IAnchorProps, {}> {
    render(): React.FunctionComponentElement<{
        ref: React.RefObject<HTMLDivElement>;
    }>;
}
export interface IDialogTapModal extends IComponentEvent<Dialog> {
}
/** Properties for [[Dialog]] component. */
export interface IDialogProps extends IComponentProps {
    visible?: boolean;
    modal?: boolean;
    portal?: React.Component<any, any>;
    anchor?: "left" | "right" | "top" | "bottom";
    justify?: "start" | "end" | "center";
    align?: "start" | "end" | "center";
    onTapModal?: (event: IDialogTapModal) => void;
}
/**
 * Provides a freely placeable dialog container. The dialog can be displayed modal or non-modal.
 * An event reports when the user clicks outside of the dialog area.
 */
export default class Dialog extends React.Component<IDialogProps, {}> {
    static readonly defaultProps: IDialogProps;
    protected static readonly style: CSSProperties;
    protected static readonly modalStyle: CSSProperties;
    /** div container for the dialog component. */
    dialogElement: HTMLDivElement;
    /** the anchor's html element if an anchor is provided by client. */
    anchorElement: HTMLElement;
    /** the modal plane if the dialog is to be presented modal. */
    modalElement: HTMLDivElement;
    /** The dialog is always displayed within the portal element. */
    protected portalElement: HTMLElement;
    /** A root element for the dialog appended to the top-level document. */
    protected parentElement: HTMLElement;
    constructor(props: IDialogProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    protected onRefAnchor(component: Anchor): void;
    protected onRefDialog(element: HTMLDivElement): void;
    protected onRefModalPlane(element: HTMLDivElement): void;
    protected onModalPlaneDown(event: PointerEvent<HTMLDivElement>): void;
    protected onModalPlaneKeyPress(event: KeyboardEvent<HTMLDivElement>): void;
    protected calculateLayout(): void;
}
