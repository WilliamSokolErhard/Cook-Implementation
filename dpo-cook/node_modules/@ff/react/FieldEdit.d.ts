/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { CSSProperties } from "react";
import { IComponentEvent, IComponentProps } from "./common";
import { PointerEvent } from "./Draggable";
export interface IFieldEditFormat {
    type: string;
    preset?: any;
    min?: number;
    max?: number;
    step?: number;
    precision?: number;
    bar?: boolean;
    percent?: boolean;
    options?: string[];
}
export interface IFieldEditChangeEvent extends IComponentEvent<FieldEdit> {
    value: number | string | boolean;
}
export interface IFieldEditCommitEvent extends IComponentEvent<FieldEdit> {
    value: number | string | boolean;
}
/** Properties for [[FieldEdit]] component. */
export interface IFieldEditProps extends IComponentProps {
    value?: any;
    format?: IFieldEditFormat;
    onChange?: (event: IFieldEditChangeEvent) => void;
    onCommit?: (event: IFieldEditCommitEvent) => void;
}
export interface IFieldEditState {
    value: any;
    format: IFieldEditFormat;
    isDragging: boolean;
    isEditing: boolean;
}
export default class FieldEdit extends React.Component<IFieldEditProps, IFieldEditState> {
    static defaultProps: IFieldEditProps;
    static textStyle: CSSProperties;
    static Float: IFieldEditFormat;
    static Integer: IFieldEditFormat;
    static String: IFieldEditFormat;
    static Color: IFieldEditFormat;
    inputElement: HTMLInputElement;
    startValue: any;
    constructor(props: IFieldEditProps);
    render(): JSX.Element;
    setValue(value: any): void;
    incrementValue(delta: number): void;
    onDragBegin(): void;
    onDragMove(event: PointerEvent, dx: number, dy: number): void;
    private onDragEnd;
    private onTap;
    private setInputRef;
    private onInputKeyDown;
    private onBlur;
    private onInputChange;
    private startEditing;
    private stopEditing;
    private checkBounds;
    private getFormattedValue;
    private getBarWidthPercent;
}
