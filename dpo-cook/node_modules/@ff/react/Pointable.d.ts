/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
import * as React from "react";
import { MouseEvent as ReactMouseEvent, PointerEvent as ReactPointerEvent } from "react";
import { IComponentProps } from "./common";
export declare type MouseEvent = ReactMouseEvent<HTMLDivElement>;
export declare type PointerEvent = ReactPointerEvent<HTMLDivElement>;
/** Properties for [[Pointable]] component. */
export interface IPointableProps extends IComponentProps {
    capture?: boolean;
    onPointerDown?: (event: PointerEvent) => void;
    onPointerMove?: (event: PointerEvent) => void;
    onPointerUp?: (event: PointerEvent) => void;
    onPointerCancel?: (event: PointerEvent) => void;
    onPointerEnter?: (event: PointerEvent) => void;
    onPointerLeave?: (event: PointerEvent) => void;
}
export default class Pointable<P = IPointableProps, S = {}> extends React.Component<P, S> {
    protected static defaultProps: {
        className: string;
    };
    protected element: HTMLDivElement;
    protected capturePointer: boolean;
    private _activePointers;
    constructor(props: P);
    get activePointers(): {
        [id: string]: PointerEvent;
    };
    get activePointerList(): PointerEvent[];
    get activePointerCount(): number;
    render(): JSX.Element;
    protected onPointerDown(event: PointerEvent): void;
    protected onPointerMove(event: PointerEvent): void;
    protected onPointerUp(event: PointerEvent): void;
    protected onPointerCancel(event: PointerEvent): void;
    protected onPointerEnter(event: PointerEvent): void;
    protected onPointerLeave(event: PointerEvent): void;
    protected onDoubleClick(event: MouseEvent): void;
    protected onContextMenu(event: MouseEvent): void;
}
