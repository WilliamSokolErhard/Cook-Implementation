"use strict";
/**
 * FF Typescript Foundation Library
 * Copyright 2018 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const Draggable_1 = require("./Draggable");
/**
 * Each content section of a splitter must be wrapped in a splitter section.
 * A splitter container contains two or more splitter sections. The container
 * automatically adds splitter handles between sections, so they become
 * resizable.
 */
class SplitterSection extends React.Component {
    render() {
        const props = this.props;
        let sectionStyle = Object.assign({}, SplitterSection.sectionStyle);
        sectionStyle.flexBasis = props.size || "0%";
        return (React.createElement("div", { className: props.className, style: sectionStyle }, props.children));
    }
}
exports.SplitterSection = SplitterSection;
SplitterSection.defaultProps = {
    className: "ff-splitter-section",
};
SplitterSection.sectionStyle = {
    position: "relative",
    flex: "1 1 0%",
    overflow: "hidden"
};
class SplitterContainer extends React.Component {
    constructor(props) {
        super(props);
        this.isVertical = this.props.direction === "vertical";
        this.element = null;
        this.handleElements = [];
        this.sectionElements = [];
        this.sections = [];
        this.activeHandleIndex = -1;
        this.containerSize = 0;
        this.lastResizeEvent = null;
        this.onRef = this.onRef.bind(this);
        this.onDragBegin = this.onDragBegin.bind(this);
        this.onDragMove = this.onDragMove.bind(this);
        this.onDragEnd = this.onDragEnd.bind(this);
    }
    render() {
        const children = this.props.children;
        let components = [];
        if (Array.isArray(children) && children.length > 0) {
            const sections = this.sections =
                children.filter(child => child.type === SplitterSection);
            const sectionCount = sections.length;
            const numericSizes = [];
            let totalSize = 0;
            let sizeCount = 0;
            for (let i = 0; i < sectionCount; ++i) {
                let size = sections[i].props.size;
                let numericSize = 0;
                if (size) {
                    if (typeof size === "string") {
                        if (size.endsWith("%")) {
                            numericSize = Number.parseFloat(size) / 100;
                        }
                        else {
                            numericSize = Number.parseFloat(size);
                        }
                    }
                    else {
                        numericSize = size;
                    }
                }
                if (numericSize > 0) {
                    totalSize += numericSize;
                    sizeCount++;
                }
                numericSizes.push(numericSize);
            }
            let defaultSize = 0;
            if (sizeCount < sectionCount) {
                if (totalSize < 1) {
                    defaultSize = (1 - totalSize) / (sectionCount - sizeCount);
                }
                else {
                    defaultSize = totalSize / sectionCount;
                }
                totalSize += defaultSize * (sectionCount - sizeCount);
            }
            let handleStyle = this.isVertical
                ? SplitterContainer.verticalHandleStyle
                : SplitterContainer.horizontalHandleStyle;
            for (let i = 0; i < sectionCount; ++i) {
                // update splitter section size
                let size;
                if (numericSizes[i] > 0) {
                    size = (numericSizes[i] / totalSize * 100).toFixed(3) + "%";
                }
                else {
                    size = (defaultSize / totalSize * 100).toFixed(3) + "%";
                }
                // if no key is provided, add one
                const key = sections[i].key || i;
                const className = sections[i].props.className
                    + (this.isVertical ? " ff-vertical" : " ff-horizontal");
                // add splitter section
                components.push(React.cloneElement(sections[i], { key: "s" + key, size, className }));
                // insert a splitter handle between sections
                if (i < sectionCount - 1) {
                    components.push(React.createElement(Draggable_1.default, { key: "d" + key, className: "ff-splitter-handle", style: handleStyle, onDragBegin: this.onDragBegin, onDragMove: this.onDragMove, onDragEnd: this.onDragEnd }));
                }
            }
        }
        let containerStyle = Object.assign({}, SplitterContainer.containerStyle);
        containerStyle.flexDirection = this.isVertical ? "column" : "row";
        return (React.createElement("div", { className: this.props.className, style: containerStyle, ref: this.onRef }, components));
    }
    componentDidMount() {
        this.updateConfiguration();
    }
    componentDidUpdate() {
        this.updateConfiguration();
    }
    updateConfiguration() {
        this.handleElements.length = 0;
        this.sectionElements.length = 0;
        const children = this.element.children;
        for (let i = 0; i < children.length; ++i) {
            let child = children[i];
            (i % 2 === 0 ? this.sectionElements : this.handleElements).push(child);
        }
    }
    onRef(element) {
        this.element = element;
    }
    onDragBegin(event) {
        this.activeHandleIndex = this.handleElements.indexOf(event.target);
        this.containerSize = this.isVertical ? this.element.clientHeight : this.element.clientWidth;
    }
    onDragMove(event, dx, dy) {
        const activeHandleIndex = this.activeHandleIndex;
        if (activeHandleIndex >= 0) {
            const isVertical = this.isVertical;
            const parentSize = this.containerSize;
            const firstPane = this.sectionElements[activeHandleIndex];
            const secondPane = this.sectionElements[activeHandleIndex + 1];
            let deltaMovement = isVertical ? dy : dx;
            let firstSize = (isVertical ? firstPane.offsetHeight : firstPane.offsetWidth) + deltaMovement;
            let secondSize = (isVertical ? secondPane.offsetHeight : secondPane.offsetWidth) - deltaMovement;
            const margin = this.props.margin;
            if (firstSize < margin) {
                secondSize += firstSize - margin;
                firstSize = margin;
            }
            else if (secondSize < margin) {
                firstSize += secondSize - margin;
                secondSize = margin;
            }
            // convert to fraction values
            firstSize /= parentSize;
            secondSize /= parentSize;
            // convert to percent string values
            firstPane.style["flexBasis"] = (firstSize * 100).toFixed(3) + "%";
            secondPane.style["flexBasis"] = (secondSize * 100).toFixed(3) + "%";
            // trigger a window resize event
            if (this.props.onResize || this.props.resizeEvent) {
                window.dispatchEvent(new Event("resize"));
            }
            // notify listener, use fraction values
            if (this.props.onResize) {
                this.lastResizeEvent = {
                    index: activeHandleIndex,
                    sectionIds: [
                        this.sections[activeHandleIndex].props.id,
                        this.sections[activeHandleIndex + 1].props.id
                    ],
                    sizes: [
                        firstSize,
                        secondSize
                    ],
                    isDragging: true,
                    id: this.props.id,
                    sender: this
                };
                this.props.onResize(this.lastResizeEvent);
            }
        }
    }
    onDragEnd() {
        this.containerSize = 0;
        this.activeHandleIndex = -1;
        if (this.lastResizeEvent && this.props.onResize) {
            this.lastResizeEvent.isDragging = false;
            this.props.onResize(this.lastResizeEvent);
            this.lastResizeEvent = null;
        }
    }
}
exports.SplitterContainer = SplitterContainer;
SplitterContainer.defaultProps = {
    className: "ff-splitter-container",
    direction: "horizontal",
    margin: 20
};
// container uses flex-layout
SplitterContainer.containerStyle = {
    position: "absolute",
    left: 0, right: 0, top: 0, bottom: 0,
    overflow: "hidden",
    display: "flex",
    flexDirection: "row"
};
SplitterContainer.horizontalHandleStyle = {
    position: "relative",
    zIndex: 1,
    padding: "0 5px",
    margin: "0 -5px",
    cursor: "col-resize"
};
SplitterContainer.verticalHandleStyle = {
    position: "relative",
    zIndex: 1,
    padding: "5px 0",
    margin: "-5px 0",
    cursor: "row-resize"
};
//# sourceMappingURL=Splitter.js.map