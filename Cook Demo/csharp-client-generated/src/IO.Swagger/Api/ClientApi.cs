/* 
 * Cook Processing API
 *
 * Single Machine API for Cook Processing Service, Smithsonian 3D Foundation Project 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ralph@framefactory.ch
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IClientApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// returns information about all jobs owned by client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>List&lt;JobInfo&gt;</returns>
        List<JobInfo> ClientsClientIdJobsGet (string clientId);

        /// <summary>
        /// returns information about all jobs owned by client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>ApiResponse of List&lt;JobInfo&gt;</returns>
        ApiResponse<List<JobInfo>> ClientsClientIdJobsGetWithHttpInfo (string clientId);
        /// <summary>
        /// stops a running job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns></returns>
        void ClientsClientIdJobsJobIdCancelPatch (string clientId, string jobId);

        /// <summary>
        /// stops a running job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientsClientIdJobsJobIdCancelPatchWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// stops a job if running and removes it from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns></returns>
        void ClientsClientIdJobsJobIdDelete (string clientId, string jobId);

        /// <summary>
        /// stops a job if running and removes it from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientsClientIdJobsJobIdDeleteWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// returns information about job with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>JobInfo</returns>
        JobInfo ClientsClientIdJobsJobIdGet (string clientId, string jobId);

        /// <summary>
        /// returns information about job with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of JobInfo</returns>
        ApiResponse<JobInfo> ClientsClientIdJobsJobIdGetWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// returns an extensive job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>JobReport</returns>
        JobReport ClientsClientIdJobsJobIdReportGet (string clientId, string jobId);

        /// <summary>
        /// returns an extensive job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of JobReport</returns>
        ApiResponse<JobReport> ClientsClientIdJobsJobIdReportGetWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// starts a previously created job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns></returns>
        void ClientsClientIdJobsJobIdRunPatch (string clientId, string jobId);

        /// <summary>
        /// starts a previously created job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientsClientIdJobsJobIdRunPatchWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// creates a new job
        /// </summary>
        /// <remarks>
        /// Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void JobPost (JobOrder body = null);

        /// <summary>
        /// creates a new job
        /// </summary>
        /// <remarks>
        /// Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> JobPostWithHttpInfo (JobOrder body = null);
        /// <summary>
        /// returns a list with information about all available processing recipes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RecipeInfo&gt;</returns>
        List<RecipeInfo> RecipesGet ();

        /// <summary>
        /// returns a list with information about all available processing recipes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RecipeInfo&gt;</returns>
        ApiResponse<List<RecipeInfo>> RecipesGetWithHttpInfo ();
        /// <summary>
        /// returns an individual recipe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>Recipe</returns>
        Recipe RecipesRecipeIdGet (string recipeId);

        /// <summary>
        /// returns an individual recipe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Recipe</returns>
        ApiResponse<Recipe> RecipesRecipeIdGetWithHttpInfo (string recipeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// returns information about all jobs owned by client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>Task of List&lt;JobInfo&gt;</returns>
        System.Threading.Tasks.Task<List<JobInfo>> ClientsClientIdJobsGetAsync (string clientId);

        /// <summary>
        /// returns information about all jobs owned by client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (List&lt;JobInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobInfo>>> ClientsClientIdJobsGetAsyncWithHttpInfo (string clientId);
        /// <summary>
        /// stops a running job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientsClientIdJobsJobIdCancelPatchAsync (string clientId, string jobId);

        /// <summary>
        /// stops a running job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdJobsJobIdCancelPatchAsyncWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// stops a job if running and removes it from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientsClientIdJobsJobIdDeleteAsync (string clientId, string jobId);

        /// <summary>
        /// stops a job if running and removes it from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdJobsJobIdDeleteAsyncWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// returns information about job with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of JobInfo</returns>
        System.Threading.Tasks.Task<JobInfo> ClientsClientIdJobsJobIdGetAsync (string clientId, string jobId);

        /// <summary>
        /// returns information about job with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (JobInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobInfo>> ClientsClientIdJobsJobIdGetAsyncWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// returns an extensive job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of JobReport</returns>
        System.Threading.Tasks.Task<JobReport> ClientsClientIdJobsJobIdReportGetAsync (string clientId, string jobId);

        /// <summary>
        /// returns an extensive job report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (JobReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobReport>> ClientsClientIdJobsJobIdReportGetAsyncWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// starts a previously created job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientsClientIdJobsJobIdRunPatchAsync (string clientId, string jobId);

        /// <summary>
        /// starts a previously created job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdJobsJobIdRunPatchAsyncWithHttpInfo (string clientId, string jobId);
        /// <summary>
        /// creates a new job
        /// </summary>
        /// <remarks>
        /// Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task JobPostAsync (JobOrder body = null);

        /// <summary>
        /// creates a new job
        /// </summary>
        /// <remarks>
        /// Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> JobPostAsyncWithHttpInfo (JobOrder body = null);
        /// <summary>
        /// returns a list with information about all available processing recipes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RecipeInfo&gt;</returns>
        System.Threading.Tasks.Task<List<RecipeInfo>> RecipesGetAsync ();

        /// <summary>
        /// returns a list with information about all available processing recipes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RecipeInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecipeInfo>>> RecipesGetAsyncWithHttpInfo ();
        /// <summary>
        /// returns an individual recipe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>Task of Recipe</returns>
        System.Threading.Tasks.Task<Recipe> RecipesRecipeIdGetAsync (string recipeId);

        /// <summary>
        /// returns an individual recipe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipe>> RecipesRecipeIdGetAsyncWithHttpInfo (string recipeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ClientApi : IClientApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// </summary>
        /// <returns></returns>
        public ClientApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// returns information about all jobs owned by client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>List&lt;JobInfo&gt;</returns>
        public List<JobInfo> ClientsClientIdJobsGet (string clientId)
        {
             ApiResponse<List<JobInfo>> localVarResponse = ClientsClientIdJobsGetWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns information about all jobs owned by client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>ApiResponse of List&lt;JobInfo&gt;</returns>
        public ApiResponse< List<JobInfo> > ClientsClientIdJobsGetWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsGet");

            var localVarPath = "/clients/{clientId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobInfo>)));
        }

        /// <summary>
        /// returns information about all jobs owned by client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>Task of List&lt;JobInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobInfo>> ClientsClientIdJobsGetAsync (string clientId)
        {
             ApiResponse<List<JobInfo>> localVarResponse = await ClientsClientIdJobsGetAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns information about all jobs owned by client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (List&lt;JobInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobInfo>>> ClientsClientIdJobsGetAsyncWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsGet");

            var localVarPath = "/clients/{clientId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobInfo>)));
        }

        /// <summary>
        /// stops a running job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns></returns>
        public void ClientsClientIdJobsJobIdCancelPatch (string clientId, string jobId)
        {
             ClientsClientIdJobsJobIdCancelPatchWithHttpInfo(clientId, jobId);
        }

        /// <summary>
        /// stops a running job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientsClientIdJobsJobIdCancelPatchWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdCancelPatch");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdCancelPatch");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdCancelPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// stops a running job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientsClientIdJobsJobIdCancelPatchAsync (string clientId, string jobId)
        {
             await ClientsClientIdJobsJobIdCancelPatchAsyncWithHttpInfo(clientId, jobId);

        }

        /// <summary>
        /// stops a running job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdJobsJobIdCancelPatchAsyncWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdCancelPatch");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdCancelPatch");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdCancelPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// stops a job if running and removes it from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns></returns>
        public void ClientsClientIdJobsJobIdDelete (string clientId, string jobId)
        {
             ClientsClientIdJobsJobIdDeleteWithHttpInfo(clientId, jobId);
        }

        /// <summary>
        /// stops a job if running and removes it from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientsClientIdJobsJobIdDeleteWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdDelete");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdDelete");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// stops a job if running and removes it from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientsClientIdJobsJobIdDeleteAsync (string clientId, string jobId)
        {
             await ClientsClientIdJobsJobIdDeleteAsyncWithHttpInfo(clientId, jobId);

        }

        /// <summary>
        /// stops a job if running and removes it from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdJobsJobIdDeleteAsyncWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdDelete");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdDelete");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// returns information about job with given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>JobInfo</returns>
        public JobInfo ClientsClientIdJobsJobIdGet (string clientId, string jobId)
        {
             ApiResponse<JobInfo> localVarResponse = ClientsClientIdJobsJobIdGetWithHttpInfo(clientId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns information about job with given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of JobInfo</returns>
        public ApiResponse< JobInfo > ClientsClientIdJobsJobIdGetWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdGet");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobInfo)));
        }

        /// <summary>
        /// returns information about job with given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of JobInfo</returns>
        public async System.Threading.Tasks.Task<JobInfo> ClientsClientIdJobsJobIdGetAsync (string clientId, string jobId)
        {
             ApiResponse<JobInfo> localVarResponse = await ClientsClientIdJobsJobIdGetAsyncWithHttpInfo(clientId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns information about job with given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (JobInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobInfo>> ClientsClientIdJobsJobIdGetAsyncWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdGet");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobInfo)));
        }

        /// <summary>
        /// returns an extensive job report 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>JobReport</returns>
        public JobReport ClientsClientIdJobsJobIdReportGet (string clientId, string jobId)
        {
             ApiResponse<JobReport> localVarResponse = ClientsClientIdJobsJobIdReportGetWithHttpInfo(clientId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns an extensive job report 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of JobReport</returns>
        public ApiResponse< JobReport > ClientsClientIdJobsJobIdReportGetWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdReportGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdReportGet");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobReport)));
        }

        /// <summary>
        /// returns an extensive job report 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of JobReport</returns>
        public async System.Threading.Tasks.Task<JobReport> ClientsClientIdJobsJobIdReportGetAsync (string clientId, string jobId)
        {
             ApiResponse<JobReport> localVarResponse = await ClientsClientIdJobsJobIdReportGetAsyncWithHttpInfo(clientId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns an extensive job report 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (JobReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobReport>> ClientsClientIdJobsJobIdReportGetAsyncWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdReportGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdReportGet");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobReport)));
        }

        /// <summary>
        /// starts a previously created job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns></returns>
        public void ClientsClientIdJobsJobIdRunPatch (string clientId, string jobId)
        {
             ClientsClientIdJobsJobIdRunPatchWithHttpInfo(clientId, jobId);
        }

        /// <summary>
        /// starts a previously created job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientsClientIdJobsJobIdRunPatchWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdRunPatch");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdRunPatch");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdRunPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// starts a previously created job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientsClientIdJobsJobIdRunPatchAsync (string clientId, string jobId)
        {
             await ClientsClientIdJobsJobIdRunPatchAsyncWithHttpInfo(clientId, jobId);

        }

        /// <summary>
        /// starts a previously created job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">a client&#x27;s unique identifier</param>
        /// <param name="jobId">a job&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdJobsJobIdRunPatchAsyncWithHttpInfo (string clientId, string jobId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->ClientsClientIdJobsJobIdRunPatch");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ClientApi->ClientsClientIdJobsJobIdRunPatch");

            var localVarPath = "/clients/{clientId}/jobs/{jobId}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdJobsJobIdRunPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new job Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void JobPost (JobOrder body = null)
        {
             JobPostWithHttpInfo(body);
        }

        /// <summary>
        /// creates a new job Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> JobPostWithHttpInfo (JobOrder body = null)
        {

            var localVarPath = "/job";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new job Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task JobPostAsync (JobOrder body = null)
        {
             await JobPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates a new job Creates a new job and an associated temporary folder for file exchange. After creation, the temp folder can be accessed via WebDAV at &#x27;/{jobId}&#x27; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> JobPostAsyncWithHttpInfo (JobOrder body = null)
        {

            var localVarPath = "/job";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// returns a list with information about all available processing recipes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RecipeInfo&gt;</returns>
        public List<RecipeInfo> RecipesGet ()
        {
             ApiResponse<List<RecipeInfo>> localVarResponse = RecipesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a list with information about all available processing recipes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RecipeInfo&gt;</returns>
        public ApiResponse< List<RecipeInfo> > RecipesGetWithHttpInfo ()
        {

            var localVarPath = "/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecipeInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RecipeInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecipeInfo>)));
        }

        /// <summary>
        /// returns a list with information about all available processing recipes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RecipeInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecipeInfo>> RecipesGetAsync ()
        {
             ApiResponse<List<RecipeInfo>> localVarResponse = await RecipesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a list with information about all available processing recipes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RecipeInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RecipeInfo>>> RecipesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecipeInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RecipeInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecipeInfo>)));
        }

        /// <summary>
        /// returns an individual recipe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>Recipe</returns>
        public Recipe RecipesRecipeIdGet (string recipeId)
        {
             ApiResponse<Recipe> localVarResponse = RecipesRecipeIdGetWithHttpInfo(recipeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns an individual recipe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>ApiResponse of Recipe</returns>
        public ApiResponse< Recipe > RecipesRecipeIdGetWithHttpInfo (string recipeId)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ClientApi->RecipesRecipeIdGet");

            var localVarPath = "/recipes/{recipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipeId", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipesRecipeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Recipe) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Recipe)));
        }

        /// <summary>
        /// returns an individual recipe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>Task of Recipe</returns>
        public async System.Threading.Tasks.Task<Recipe> RecipesRecipeIdGetAsync (string recipeId)
        {
             ApiResponse<Recipe> localVarResponse = await RecipesRecipeIdGetAsyncWithHttpInfo(recipeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns an individual recipe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">a recipe&#x27;s unique identifier</param>
        /// <returns>Task of ApiResponse (Recipe)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Recipe>> RecipesRecipeIdGetAsyncWithHttpInfo (string recipeId)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ClientApi->RecipesRecipeIdGet");

            var localVarPath = "/recipes/{recipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipeId", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipesRecipeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Recipe) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Recipe)));
        }

    }
}
