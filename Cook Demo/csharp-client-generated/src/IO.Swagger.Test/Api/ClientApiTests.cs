/* 
 * Cook Processing API
 *
 * Single Machine API for Cook Processing Service, Smithsonian 3D Foundation Project 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ralph@framefactory.ch
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ClientApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ClientApiTests
    {
        private ClientApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ClientApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ClientApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ClientApi
            //Assert.IsInstanceOfType(typeof(ClientApi), instance, "instance is a ClientApi");
        }

        /// <summary>
        /// Test ClientsClientIdJobsGet
        /// </summary>
        [Test]
        public void ClientsClientIdJobsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //var response = instance.ClientsClientIdJobsGet(clientId);
            //Assert.IsInstanceOf<List<JobInfo>> (response, "response is List<JobInfo>");
        }
        /// <summary>
        /// Test ClientsClientIdJobsJobIdCancelPatch
        /// </summary>
        [Test]
        public void ClientsClientIdJobsJobIdCancelPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string jobId = null;
            //instance.ClientsClientIdJobsJobIdCancelPatch(clientId, jobId);
            
        }
        /// <summary>
        /// Test ClientsClientIdJobsJobIdDelete
        /// </summary>
        [Test]
        public void ClientsClientIdJobsJobIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string jobId = null;
            //instance.ClientsClientIdJobsJobIdDelete(clientId, jobId);
            
        }
        /// <summary>
        /// Test ClientsClientIdJobsJobIdGet
        /// </summary>
        [Test]
        public void ClientsClientIdJobsJobIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string jobId = null;
            //var response = instance.ClientsClientIdJobsJobIdGet(clientId, jobId);
            //Assert.IsInstanceOf<JobInfo> (response, "response is JobInfo");
        }
        /// <summary>
        /// Test ClientsClientIdJobsJobIdReportGet
        /// </summary>
        [Test]
        public void ClientsClientIdJobsJobIdReportGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string jobId = null;
            //var response = instance.ClientsClientIdJobsJobIdReportGet(clientId, jobId);
            //Assert.IsInstanceOf<JobReport> (response, "response is JobReport");
        }
        /// <summary>
        /// Test ClientsClientIdJobsJobIdRunPatch
        /// </summary>
        [Test]
        public void ClientsClientIdJobsJobIdRunPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string jobId = null;
            //instance.ClientsClientIdJobsJobIdRunPatch(clientId, jobId);
            
        }
        /// <summary>
        /// Test JobPost
        /// </summary>
        [Test]
        public void JobPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobOrder body = null;
            //instance.JobPost(body);
            
        }
        /// <summary>
        /// Test RecipesGet
        /// </summary>
        [Test]
        public void RecipesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RecipesGet();
            //Assert.IsInstanceOf<List<RecipeInfo>> (response, "response is List<RecipeInfo>");
        }
        /// <summary>
        /// Test RecipesRecipeIdGet
        /// </summary>
        [Test]
        public void RecipesRecipeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string recipeId = null;
            //var response = instance.RecipesRecipeIdGet(recipeId);
            //Assert.IsInstanceOf<Recipe> (response, "response is Recipe");
        }
    }

}
